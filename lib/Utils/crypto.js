var __createBinding=this&&this.__createBinding||(Object.create?function(a,b,c,d){void 0===d&&(d=c);var e=Object.getOwnPropertyDescriptor(b,c);if(!e||("get"in e?!b.__esModule:e.writable||e.configurable))e={enumerable:!0,get:function(){return b[c]}};Object.defineProperty(a,d,e)}:function(a,b,c,d){void 0===d&&(d=c);a[d]=b[c]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(a,b){Object.defineProperty(a,"default",{enumerable:!0,value:b})}:function(a,b){a["default"]=b}),__importStar=
this&&this.__importStar||function(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)"default"!==c&&Object.prototype.hasOwnProperty.call(a,c)&&__createBinding(b,a,c);__setModuleDefault(b,a);return b},__importDefault=this&&this.__importDefault||function(a){return a&&a.__esModule?a:{"default":a}};Object.defineProperty(exports,"__esModule",{value:!0});
exports.derivePairingCodeKey=exports.hkdf=exports.md5=exports.sha256=exports.hmacSign=exports.aesEncrypWithIV=exports.aesEncrypt=exports.aesDecryptWithIV=exports.aesDecrypt=exports.aesDecryptCTR=exports.aesEncryptCTR=exports.aesDecryptGCM=exports.aesEncryptGCM=exports.signedKeyPair=exports.Curve=exports.generateSignalPubKey=void 0;
const crypto_1=require("crypto"),futoin_hkdf_1=__importDefault(require("futoin-hkdf")),libsignal=__importStar(require("libsignal")),Defaults_1=require("../Defaults"),generateSignalPubKey=a=>33===a.length?a:Buffer.concat([Defaults_1.KEY_BUNDLE_TYPE,a]);exports.generateSignalPubKey=generateSignalPubKey;
exports.Curve={generateKeyPair:()=>{const {pubKey:a,privKey:b}=libsignal.curve.generateKeyPair();return{private:Buffer.from(b),public:Buffer.from(a.slice(1))}},sharedKey:(a,b)=>{a=libsignal.curve.calculateAgreement((0,exports.generateSignalPubKey)(b),a);return Buffer.from(a)},sign:(a,b)=>libsignal.curve.calculateSignature(a,b),verify:(a,b,c)=>{try{return libsignal.curve.verifySignature((0,exports.generateSignalPubKey)(a),b,c),!0}catch(d){return!1}}};
const signedKeyPair=(a,b)=>{const c=exports.Curve.generateKeyPair(),d=(0,exports.generateSignalPubKey)(c.public);a=exports.Curve.sign(a.private,d);return{keyPair:c,signature:a,keyId:b}};exports.signedKeyPair=signedKeyPair;const GCM_TAG_LENGTH=16;function aesEncryptGCM(a,b,c,d){b=(0,crypto_1.createCipheriv)("aes-256-gcm",b,c);b.setAAD(d);return Buffer.concat([b.update(a),b.final(),b.getAuthTag()])}exports.aesEncryptGCM=aesEncryptGCM;
function aesDecryptGCM(a,b,c,d){b=(0,crypto_1.createDecipheriv)("aes-256-gcm",b,c);c=a.slice(0,a.length-GCM_TAG_LENGTH);a=a.slice(a.length-GCM_TAG_LENGTH);b.setAAD(d);b.setAuthTag(a);return Buffer.concat([b.update(c),b.final()])}exports.aesDecryptGCM=aesDecryptGCM;function aesEncryptCTR(a,b,c){b=(0,crypto_1.createCipheriv)("aes-256-ctr",b,c);return Buffer.concat([b.update(a),b.final()])}exports.aesEncryptCTR=aesEncryptCTR;
function aesDecryptCTR(a,b,c){b=(0,crypto_1.createDecipheriv)("aes-256-ctr",b,c);return Buffer.concat([b.update(a),b.final()])}exports.aesDecryptCTR=aesDecryptCTR;function aesDecrypt(a,b){return aesDecryptWithIV(a.slice(16,a.length),b,a.slice(0,16))}exports.aesDecrypt=aesDecrypt;function aesDecryptWithIV(a,b,c){b=(0,crypto_1.createDecipheriv)("aes-256-cbc",b,c);return Buffer.concat([b.update(a),b.final()])}exports.aesDecryptWithIV=aesDecryptWithIV;
function aesEncrypt(a,b){const c=(0,crypto_1.randomBytes)(16);b=(0,crypto_1.createCipheriv)("aes-256-cbc",b,c);return Buffer.concat([c,b.update(a),b.final()])}exports.aesEncrypt=aesEncrypt;function aesEncrypWithIV(a,b,c){b=(0,crypto_1.createCipheriv)("aes-256-cbc",b,c);return Buffer.concat([b.update(a),b.final()])}exports.aesEncrypWithIV=aesEncrypWithIV;function hmacSign(a,b,c="sha256"){return(0,crypto_1.createHmac)(c,b).update(a).digest()}exports.hmacSign=hmacSign;
function sha256(a){return(0,crypto_1.createHash)("sha256").update(a).digest()}exports.sha256=sha256;function md5(a){return(0,crypto_1.createHash)("md5").update(a).digest()}exports.md5=md5;function hkdf(a,b,c){return(0,futoin_hkdf_1.default)(Buffer.isBuffer(a)?a:Buffer.from(a),b,c)}exports.hkdf=hkdf;function derivePairingCodeKey(a,b){return(0,crypto_1.pbkdf2Sync)(a,b,131072,32,"sha256")}exports.derivePairingCodeKey=derivePairingCodeKey;
